version = "version 1.8 (April 25 2018)"
--[[

    Split EXR v1.8
    by S.Neve / House of Secrets
    
    Yay for Fusion 6, splitting of multi channel EXR to multiple loaders scripting is now possible
    
    v1.8
    Various fixes for Fusion 8 + 9
    
    v1.7
    Added checksum to see which fusion version is running
    
    v1.6
    Fixed preference saving, iterating over the table needs to be done using pairs, rather than ipairs
    
    v1.5
    Fixed the preference saving on Win 7 and 8. This is the same problem that occurs on all tools that use the script preference saving function this tool uses.
    Added Fusion 7 support by explicitly using ipairs when iterating table value key pairs.
    
    v1.4
    Added grid and tile placement options as per request
    Added preference writing and loading, so settings are saved between sessions.
    
    v1.3
    Changed the new Loader name creation as per request by Alexey D.
    This needs testing to see everything works.
    
    v1.2
    Changed the Loader tool EXR format check, this should have fixed the (strange and random) 'attempt
    to index global ‘tool’ (a nil value)' error.
    
    v1.1
    Expanded the prototype a bit, to handle XYZ channel names aswel.
    Added menu to handle placement options, later i will add options to handle what to do with
    which channels.
    Spaghetti code galore by the way, will fix this with v1.2
    
    v1.0
    Initial prototype.
    
]]--
myscriptprefs = function(op)

    -- saves or loads script preferences, i have no idea who wrote the original
    -- code, recognize your code, let me know for the proper kudos.
    local _scriptname
    if(fusion.Version < 7.5) then
        _scriptname=eyeon.split(debug.getinfo(1).source,[[/]])
    else
        _scriptname=bmd.split(debug.getinfo(1).source,[[/]])
    end
    local _scriptname=_scriptname[table.getn(_scriptname)]
 
    local prefname = _scriptname..[[.ScriptPrefs]]
    if os.getenv( "userprofile" ) then
        cpath = os.getenv( "userprofile" )..([[\ScriptPrefs\]])
    elseif os.getenv("FUSION_PROFILE_DIR") and os.getenv("FUSION_PROFILE") then
        cpath=os.getenv("FUSION_PROFILE_DIR")..[[\]]..os.getenv("FUSION_PROFILE")..([[\ScriptPrefs\]])
    else
        cpath = fusion:MapPath("Fusion:\\").."profiles"..([[\ScriptPrefs\]])
    end
 
    local cfg = cpath..prefname
 
    if op and op=='write' then
        if not fileexists(cpath) then
            createdir(cpath)
        end
        file,err = io.open(cfg, "w + ")
        if file then
            local h="-- Script preferences for ".._scriptname.."\n-- generated by ".._scriptname.."\n\n"
            file:write(h .. "_cfs = {}\n")
            for i, v in pairs(_cfs) do
                if (type(v) == "string") then
                    file:write("_cfs[\"" .. i .. "\"]= [["..v.."]]\n")
                elseif (type(v) == "boolean" or type(v) == "number") then
                    file:write("_cfs[\"" .. i .. "\"]= " .. v .. "\n")
                end
            end
            file:close()
        end
        file = nil
    elseif op=='read' then
        if (fileexists(cfg)) then
            dofile(cfg)
            if (type("_cfs") == nil) then
                return
                {}
            end
        else
            return
            {}
        end
    end
end
------------------------------------------------------------------------

function removedups (t) -- thanks to Doug Currie at Stackoverflow for this function
    local result = {}
    local count = 0
    local found
    for i,v in ipairs(t) do
        found = false
        if count > 0 then
            for j = 1,count do
                    if v == result[j] then found = true; break end
                end
        end
        if not found then 
            count = count + 1
            result[count] = v 
        end
    end
    return result, count
end


attrs = tool:GetAttrs()

-- check to see we have a Loader with actual EXR data
if attrs.TOOLS_RegID == "Loader" then
    if tool.Clip[comp.CurrentTime] == "" then
        print("Loader contains no clips to explore")
        return
    end
    if attrs.TOOLST_Clip_FormatName[1] ~= "OpenEXRFormat" then
        print("Loader is not an EXR file")
        return
    end
else
    print("Selected tool is not a Loader")
    return
end

local exrFileName = attrs.TOOLST_Clip_Name[1]

--get list of all channels
channelList = tool.Clip1.OpenEXRFormat.RedName:GetAttrs().INPIDT_ComboControl_ID
newChannelList = {}

-- filter out None,R,G,B and A as these are already used by the original Loader
for i = 1, table.getn(channelList) do
    if not (channelList[i] == "SomethingThatWontMatchHopefully" or channelList[i] == "R" or channelList[i] == "G" or channelList[i] == "B" or channelList[i] == "A" ) then
        table.insert(newChannelList,channelList[i])
    end
end

-- asume a deranged monkey wrote out the channels and decided to scramble 'm all
table.sort(newChannelList)

--start creating loaders, we start at the top of the table so we can safely remove entries without screwing up orders
listSize = table.getn(newChannelList)
loaderList = {}
for i = 1, listSize do
    --print("inverted : " .. newChannelList[listSize - i + 1])
    table.insert(loaderList, (string.gsub( newChannelList[listSize - i + 1], "[.][^.]*$", ""))) --create a table with all the new loaders
end

loaderList = removedups(loaderList)
flow=comp.CurrentFrame.FlowView
org_x_pos, org_y_pos = flow:GetPos(tool)
_cfs = {}
_cfs = myscriptprefs('read')
ret = {}

count = 1  -- used to add to the placement offset for the tool in the flow

placements = {"Vertical", "Horizontal"}

ret = composition:AskUser("hos_SplitEXR", {
    {"cdir", Name = "Placement ", "Dropdown", Default = (_cfs.cdir or comp:GetPrefs().Comp.FlowView.ForceSource), Options = placements, Width = 1.0},
    {"tiles", Name = "Source Tiles ", "Checkbox", Default = (_cfs.tiles or comp:GetPrefs().Comp.FlowView.ForceSource), Width = 1.0},
    {"grid", Name = "Grid placement", "Slider", Integer = true, Default = (_cfs.grid or 0), Min = 0, Max = 25, Width = 1.0},
    {"", "Text", Lines = 1, Default = version, ReadOnly = true, Width = 1.0}
    --{"cxyz", Name = "Map X,Y,Z channels to RGB channels ", "Checkbox", Default = (cxyz or 1), Width = 1.0},
})

if ret == nil then return end

cdir = ret.cdir
grid = ret.grid
tiles = ret.tiles
_cfs = ret
myscriptprefs('write')
count = 1
if tiles == true then
    y_pos_add = 3
else
    y_pos_add = 1
end

comp:Lock()

for i = 1, table.getn(loaderList) do
    --print(loaderList[i])
    myLoader = comp.Loader({Clip = exrFileName})
    loaderNameList = split(loaderList[i], ":")
    loaderName = ""
    if (table.getn(loaderNameList) == 0) then
        loaderName = loaderList[i]
    else
        loaderName = loaderNameList[1]
    end
        
    myLoader:SetAttrs({TOOLB_NameSet = true, TOOLS_Name = loaderName})
    myLoader.Clip1.OpenEXRFormat.RedName = "SomethingThatWontMatchHopefully"
    myLoader.Clip1.OpenEXRFormat.GreenName = "SomethingThatWontMatchHopefully"
    myLoader.Clip1.OpenEXRFormat.BlueName = "SomethingThatWontMatchHopefully"
    myLoader.Clip1.OpenEXRFormat.AlphaName = "SomethingThatWontMatchHopefully"
    myLoader.Clip1.OpenEXRFormat.XName = "SomethingThatWontMatchHopefully"
    myLoader.Clip1.OpenEXRFormat.YName = "SomethingThatWontMatchHopefully"
    myLoader.Clip1.OpenEXRFormat.ZName = "SomethingThatWontMatchHopefully"

    for j = 1 , table.getn(newChannelList) do
        if (string.gsub( newChannelList[j], "[.][^.]*$", "") == loaderList[i]) then
            sgs = string.sub( newChannelList[j], -1 )
            if(sgs == "R") then myLoader.Clip1.OpenEXRFormat.RedName = newChannelList[j]
            elseif(sgs == "G") then myLoader.Clip1.OpenEXRFormat.GreenName = newChannelList[j]
            elseif(sgs == "B") then myLoader.Clip1.OpenEXRFormat.BlueName = newChannelList[j]
            elseif(sgs == "A") then myLoader.Clip1.OpenEXRFormat.AlphaName = newChannelList[j]
            elseif(sgs == "X") then myLoader.Clip1.OpenEXRFormat.RedName = newChannelList[j]
            elseif(sgs == "Y") then myLoader.Clip1.OpenEXRFormat.GreenName = newChannelList[j]
            elseif(sgs == "Z") then myLoader.Clip1.OpenEXRFormat.BlueName = newChannelList[j]
            end
            print(newChannelList[j] .. " matched : " .. loaderList[i])
        end
    end


    flow:SetPos(myLoader, org_x_pos + (count * cdir), org_y_pos + (y_pos_add * count * (1 - cdir)))

    count = count + 1
    if grid > 0 then
        if count-1 >= grid then
            count = 1
            org_y_pos = org_y_pos + (y_pos_add * cdir)
            org_x_pos = org_x_pos + (1 * (1-cdir))
        end
    end
end
comp:Unlock()
